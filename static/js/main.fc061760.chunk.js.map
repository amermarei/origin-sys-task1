{"version":3,"sources":["TableActions.jsx","Table.jsx","App.js","serviceWorker.js","index.js"],"names":["TableActions","users","setUsers","useState","selectedRow","setSelectedRow","title","data","columns","field","filterPlaceholder","align","onSelectionChange","row","editable","onRowDelete","Promise","resolve","reject","index","tableData","id","updateRow","splice","setTimeout","onRowUpdate","oldRow","updateRows","onBulkUpdate","Rows","Object","values","updatedRows","map","user","oldData","newData","options","actionsColumnIndex","filtering","selection","exportButton","exportAllData","grouping","rowStyle","backgroundColor","headerStyle","color","actions","icon","tooltip","onClick","updatedData","filter","includes","hundleDelete","i","Table","setIsLoading","fetchAPI","axios","get","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc061760.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Fragment } from \"react\";\r\nimport { useState } from \"react\";\r\nfunction TableActions({ users, setUsers }) {\r\n    let [selectedRow, setSelectedRow] = useState([]);\r\n    const columns = [\r\n        {\r\n            title: \"ID\",\r\n            field: \"id\",\r\n            filterPlaceholder: \"Filter by ID\",\r\n            align: \"left\",\r\n        },\r\n        {\r\n            title: \"Name\",\r\n            field: \"first_name\",\r\n            filterPlaceholder: \"Filter by Name\",\r\n            align: \"left\",\r\n        },\r\n        {\r\n            title: \"Gender\",\r\n            field: \"gender\",\r\n            filterPlaceholder: \"Filter by Gender\",\r\n            align: \"left\",\r\n        },\r\n        {\r\n            title: \"Email\",\r\n            field: \"email\",\r\n            filterPlaceholder: \"Filter by Email\",\r\n            align: \"left\",\r\n        },\r\n        {\r\n            title: \"Birth Day\",\r\n            field: \"date_of_birth\",\r\n            filterPlaceholder: \"Filter by Birth Day\",\r\n            align: \"left\",\r\n        },\r\n    ];\r\n\r\n    let hundleDelete = () => {\r\n        let updatedData = users.filter((row) => !selectedRow.includes(row));\r\n        setUsers(updatedData);\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <MaterialTable\r\n                title=\"Users Data\"\r\n                data={users}\r\n                columns={columns}\r\n                align=\"left\"\r\n                onSelectionChange={(row) => setSelectedRow(row)}\r\n                editable={{\r\n                    onRowDelete: (selectedRow) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = selectedRow.tableData.id;\r\n                            const updateRow = [...users];\r\n                            updateRow.splice(index, 1);\r\n                            setTimeout(() => {\r\n                                setUsers(updateRow);\r\n                                resolve();\r\n                            }, 1000);\r\n                        }),\r\n                    onRowUpdate: (updateRow, oldRow) =>\r\n                        new Promise((resolve, reject) => {\r\n                            let index = oldRow.tableData.id;\r\n                            let updateRows = [...users];\r\n                            updateRows[index] = updateRow;\r\n                            setTimeout(() => {\r\n                                setUsers(updateRows);\r\n                                resolve();\r\n                            }, 1000);\r\n                        }),\r\n                    onBulkUpdate: (selectedRow) =>\r\n                        new Promise((resolve, reject) => {\r\n                            let Rows = Object.values(selectedRow);\r\n                            let updatedRows = [...users];\r\n                            let index;\r\n                            Rows.map((user) => {\r\n                                index = user.oldData.tableData.id;\r\n                                updatedRows[index] = user.newData;\r\n                            });\r\n                            setUsers(updatedRows);\r\n                            resolve();\r\n                        }),\r\n                }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    filtering: true,\r\n                    selection: true,\r\n                    exportButton: true,\r\n                    exportAllData: true,\r\n                    grouping: true,\r\n                    rowStyle: {\r\n                        backgroundColor: \"#EEE\",\r\n                    },\r\n                    headerStyle: {\r\n                        backgroundColor: \"#01579b\",\r\n                        color: \"#FFF\",\r\n                    },\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: \"delete\",\r\n                        tooltip: \"Delete Rows\",\r\n                        onClick: () => hundleDelete(),\r\n                    },\r\n                ]}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default TableActions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport TableActions from \"./TableActions\"\r\nimport axios from \"axios\";\r\nimport { Fragment } from \"react\";\r\nfunction Table() {\r\n    let [users, setUsers] = useState([]);\r\n    let [isLoading, setIsLoading] = useState(false);\r\n    const fetchAPI = async () => {\r\n        setIsLoading(true);\r\n        let { data } = await axios.get(\r\n            `https://random-data-api.com/api/v2/users?size=50&is_xml=true`\r\n        );\r\n        setIsLoading(false);\r\n        setUsers(data);\r\n    };\r\n    useEffect(() => {\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <TableActions users={users} setUsers={setUsers} />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nfunction App() {\n  return (\n    <Table />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}